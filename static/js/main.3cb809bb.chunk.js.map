{"version":3,"sources":["context/SocketProvider.ts","components/AskNickname.tsx","hooks/useInput.ts","components/Game.tsx","components/GameCard.tsx","components/WaitingGame.tsx","pages/MagicNumber.tsx","hooks/useMessage.ts","pages/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SocketContext","createContext","AskNickname","initialValue","useState","input","setInput","onInputChange","event","target","value","useInput","nickname","onNicknameChange","io","useContext","className","placeholder","onChange","onClick","emit","Game","props","isGameStarted","setGameStarted","isGameEnd","setGameEnd","player","useEffect","on","game","onWinPoint","payload","onLosePoint","playerName","status","isWinner","onGameEnd","onGameForceEnd","message","isSuccess","msg","children","points","to","GameCard","title","desc","pathGame","WaitingGame","max","MagicNumber","playerNumber","setPlayerNumber","setMessage","setSuccessMsg","setErrorMsg","useMessage","setSuccessMsgAndReset","setErrorMsgAndReset","once","onWin","onLose","winner","id","number","parseInt","Home","socketIO","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","setPlayer","updatePlayer","basename","Provider","exact","path","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3cb809bb.chunk.js","sourcesContent":["import { createContext } from \"react\";\nimport { Player } from \"../models/Player\";\n\nexport type SocketContextProps = {\n    io: SocketIOClient.Socket;\n    player?: Player;\n    updatePlayer: (player: Player) => void\n}\n\nexport const SocketContext = createContext<Partial<SocketContextProps>>({});\n","import React, { useContext } from \"react\";\nimport { SocketContext } from \"../context/SocketProvider\";\nimport { useInput } from \"../hooks\";\n\nexport const AskNickname = () => {\n  const { input: nickname, onInputChange: onNicknameChange } = useInput();\n  const { io } = useContext(SocketContext);\n\n  const sendNickname = () => {\n    io!.emit(\"Game::sendNickname\", nickname);\n  };\n\n  return (\n    <div className=\"field\">\n      <div className=\"control\">\n        <input className=\"input\" placeholder=\"Write your nickname\" onChange={onNicknameChange} value={nickname} />\n      </div>\n      <div className=\"control\">\n        <button className=\"button is-info\" onClick={sendNickname}>Send</button>\n      </div>\n    </div>\n  );\n};\n","import { useState } from 'react';\n\nexport const useInput = (initialValue: string = '') => {\n    const [input, setInput] = useState<string>(initialValue);\n\n    const onInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setInput(event.target.value);\n    };\n\n    return {\n        input,\n        setInput,\n        onInputChange\n    }\n}\n","import React, { FunctionComponent, useContext, useEffect, useState } from \"react\"\nimport { Message } from \"../models/Message\"\nimport { WaitingGame } from \".\"\nimport { Link } from \"react-router-dom\"\nimport { SocketContext } from \"../context/SocketProvider\"\n\ntype OnEvent = (message: string) => void;\ntype OnGameEnd = (message: string, winner: boolean) => void;\n\ntype GameProps = {\n    game: string;\n    message?: Message;\n    onWinPoint: OnEvent;\n    onWin: OnEvent;\n    onLosePoint: OnEvent;\n    onLose: OnEvent;\n    onGameEnd: OnGameEnd;\n    onGameForceEnd: OnEvent;\n}\n\nexport const Game: FunctionComponent<GameProps> = (props) => {\n    const [isGameStarted, setGameStarted] = useState(false);\n    const [isGameEnd, setGameEnd] = useState<boolean>(false);\n    const { io, player } = useContext(SocketContext);\n\n    useEffect(() => {\n        io!.on(`${props.game}::gameStart`, () => {\n            setGameStarted(true);\n        });\n\n        io!.emit('Game::join', props.game)\n\n        io!.on(`${props.game}::winPoint`, () => {\n            props.onWinPoint('You win a point !');\n        });\n        io!.on(`${props.game}::losePoint`, (payload: any) => {\n            props.onLosePoint(`You lose this round :/ ${payload.playerName} win a point.`);\n        });\n        io!.on(`${props.game}::gameEnd`, (status: any) => {\n            const isWinner = status === 'win';\n            props.onGameEnd(isWinner ? 'You win !' : 'You lose', isWinner);\n            setGameEnd(true);\n        });\n        io!.on(`${props.game}::gameForceEnd`, () => {\n            props.onGameForceEnd('Game stopped ! Due to player disconnection');\n            setGameEnd(true);\n        });\n    })\n\n    const displayMessage = (message?: Message) => {\n        if (!message) return <></>\n        return <div className={`notification is-${message.isSuccess ? 'success' : 'danger'}`}>\n            {message.msg}\n        </div>\n    }\n\n    if (!isGameStarted) return <WaitingGame />\n\n    return <div className=\"box\">\n        {displayMessage(props.message)}\n        {!isGameEnd && props.children}\n        <h5>You have {player?.points} points</h5>\n        {isGameEnd && (\n            <>\n                <br />\n                <Link to='/'>Back to games</Link>\n            </>\n        )}\n    </div>\n}","import React, { FunctionComponent } from \"react\";\nimport { Link } from \"react-router-dom\";\n\ntype GameCardProps = {\n    title: string;\n    desc: string;\n    pathGame: string;\n}\n\nexport const GameCard: FunctionComponent<GameCardProps> = (props) => {\n    return <div className=\"card\">\n        <header className=\"card-header\">\n            <p className=\"card-header-title\">{props.title}</p>\n        </header>\n        <div className=\"card-content\">\n            <div className=\"content\">{props.desc}</div>\n        </div>\n        <footer className=\"card-footer\">\n            <Link to={props.pathGame} className=\"card-footer-item\">Play</Link>\n        </footer>\n    </div>\n}\n","import React, { useContext } from \"react\";\nimport { SocketContext } from \"../context/SocketProvider\";\n\nexport const WaitingGame = () => {\n    const { player } = useContext(SocketContext);\n\n    return <div className=\"box\">\n        <h1 className=\"title is-1\">Hello {player!.nickname} !</h1>\n        <h3 className=\"title is-3\">Waiting for another player...</h3>\n        <progress className=\"progress is-large is-info\" max=\"100\" />\n    </div>\n};\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { SocketContext } from \"../context/SocketProvider\";\nimport { useMessage } from \"../hooks\";\nimport { Game } from \"../components\";\n\nexport const MagicNumber = () => {\n  const [playerNumber, setPlayerNumber] = useState('');\n  const { message, setErrorMsg, setSuccessMsg, setMessage } = useMessage();\n  const { io, player } = useContext(SocketContext);\n\n  const setSuccessMsgAndReset = (msg: string) => {\n    setSuccessMsg(msg);\n    setPlayerNumber('');\n  }\n  const setErrorMsgAndReset = (msg: string) => {\n    setErrorMsg(msg);\n    setPlayerNumber('');\n  }\n  const onGameEnd = (msg: string, winner: boolean) => {\n    setMessage({ msg, isSuccess: winner })\n    setPlayerNumber('');\n  }\n\n  useEffect(() => {\n    io!.once(\"magicnumber::numberIsLess\", () => {\n      setErrorMsg(`Number is less than ${playerNumber}!`);\n    });\n    io!.once(\"magicnumber::numberIsMore\", () => {\n      setErrorMsg(`Number is more than ${playerNumber}!`);\n    });\n  }, [playerNumber])\n\n  const handleNumber = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setPlayerNumber(event.target.value);\n  };\n\n  const sendNumber = () => {\n    if (!playerNumber) return;\n    io!.emit(\"magicnumber::tryNumber\", {\n      id: player!.id,\n      number: parseInt(playerNumber)\n    });\n  };\n\n  return <Game\n    game=\"magicnumber\"\n    message={message}\n    onWinPoint={setSuccessMsgAndReset}\n    onWin={setSuccessMsgAndReset}\n    onLosePoint={setErrorMsgAndReset}\n    onLose={setErrorMsgAndReset}\n    onGameEnd={onGameEnd}\n    onGameForceEnd={setErrorMsgAndReset}\n  >\n    <div className=\"field\">\n      <div className=\"control\">\n        <input className=\"input\" placeholder=\"Guess the number (from 0 to 1337)\" onChange={handleNumber} value={`${playerNumber}`} />\n      </div>\n      <div className=\"control\">\n        <button className=\"button is-info\" onClick={sendNumber}>\n          Send\n        </button>\n      </div>\n    </div>\n  </Game>\n};\n","import { useState } from 'react';\nimport { Message } from '../models/Message';\n\nexport const useMessage = () => {\n    const [message, setMessage] = useState<Message>();\n\n    const setSuccessMsg = (msg: string) => {\n        setMessage({ msg, isSuccess: true });\n    }\n    const setErrorMsg = (msg: string) => {\n        setMessage({ msg, isSuccess: false });\n    }\n\n    return {\n        message,\n        setSuccessMsg,\n        setErrorMsg,\n        setMessage\n    };\n}\n","import React from 'react';\nimport { GameCard } from '../components';\n\nexport const Home = () => (\n    <div className=\"columns\">\n        <div className=\"column\">\n            <GameCard\n                title='MagicNumber'\n                desc='You have to find the random MagicNumber generated, by trying some numbers.'\n                pathGame='/magicnumber'\n            />\n        </div>\n        <div className=\"column\">\n            <GameCard\n                title='MagicNumber'\n                desc='You have to find the random MagicNumber generated, by trying some numbers.'\n                pathGame='/magicnumber'\n            />\n        </div>\n        <div className=\"column\">\n            <GameCard\n                title='MagicNumber'\n                desc='You have to find the random MagicNumber generated, by trying some numbers.'\n                pathGame='/magicnumber'\n            />\n        </div>\n    </div>\n);\n","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport socketIO from 'socket.io-client';\nimport { SocketContext } from \"./context/SocketProvider\";\nimport { MagicNumber, Home } from \"./pages\";\nimport { Player } from \"./models/Player\";\nimport { AskNickname } from \"./components\";\n\nconst io = socketIO(\"https://crosspwagame.herokuapp.com/\")\n\nexport const App = () => {\n  const [player, setPlayer] = useState<Player>();\n\n  useEffect(() => {\n    io.on('Game::playerInfo', (player: any) => {\n      console.log(\"On playerInfo\", player);\n\n      updatePlayer(player)\n    });\n  }, []);\n\n  const updatePlayer = (player?: Player) => {\n    setPlayer(player);\n  }\n\n  return (\n    <Router basename='/CrossPWAGame'>\n      <SocketContext.Provider value={{ io, player, updatePlayer }}>\n        <section className=\"hero is-fullheight is-light\">\n          <div className=\"hero-head\">\n            <div className=\"container\">\n              <div className=\"tabs is-centered\">\n                <ul>\n                  <li>\n                    <Link to='/'>PWA Games</Link>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"hero-body\">\n            <div className=\"container\">\n              <header className=\"bd-index-header\">\n                {!player ? (\n                  <AskNickname />\n                ) : (\n                    <Switch>\n                      <Route exact path=\"/\">\n                        <Home />\n                      </Route>\n                      <Route path=\"/magicnumber\">\n                        <MagicNumber />\n                      </Route>\n                    </Switch>\n                  )}\n              </header>\n            </div>\n          </div>\n\n          <div className=\"hero-foot\">\n            <div className=\"container\">\n              <div className=\"tabs is-centered\">\n                <ul>\n                  <li>Let's Rock!</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </section>\n      </SocketContext.Provider >\n    </Router >\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}