{"version":3,"sources":["context/SocketProvider.ts","components/WaitingGame.tsx","components/GameCard.tsx","components/AskNickname.tsx","hooks/useInput.ts","pages/MagicNumber.tsx","hooks/useMessage.ts","pages/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SocketContext","createContext","WaitingGame","player","useContext","className","nickname","max","GameCard","props","title","desc","to","pathGame","AskNickname","initialValue","useState","input","setInput","onInputChange","event","target","value","useInput","onNicknameChange","io","placeholder","onChange","onClick","emit","MagicNumber","isGameStarted","setGameStarted","playerNumber","setPlayerNumber","message","setMessage","setSuccessMsg","msg","isSuccess","setErrorMsg","useMessage","isGameEnd","setGameEnd","useEffect","on","console","log","payload","playerName","status","once","displayMessage","id","number","parseInt","points","Home","socketIO","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","setPlayer","updatePlayer","basename","Provider","exact","path","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0af7672a.chunk.js","sourcesContent":["import { createContext } from \"react\";\nimport { Player } from \"../models/Player\";\n\nexport type SocketContextProps = {\n    io: SocketIOClient.Socket;\n    player?: Player;\n    updatePlayer: (player: Player) => void\n}\n\nexport const SocketContext = createContext<Partial<SocketContextProps>>({});\n","import React, { useContext } from \"react\";\nimport { SocketContext } from \"../context/SocketProvider\";\n\nexport const WaitingGame = () => {\n    const { player } = useContext(SocketContext);\n\n    return <div className=\"box\">\n        <h1 className=\"title is-1\">Hello {player!.nickname} !</h1>\n        <h3 className=\"title is-3\">Waiting for another player...</h3>\n        <progress className=\"progress is-large is-info\" max=\"100\" />\n    </div>\n};\n","import React, { FunctionComponent } from \"react\";\nimport { Link } from \"react-router-dom\";\n\ntype GameCardProps = {\n    title: string;\n    desc: string;\n    pathGame: string;\n}\n\nexport const GameCard: FunctionComponent<GameCardProps> = (props) => {\n    return <div className=\"card\">\n        <header className=\"card-header\">\n            <p className=\"card-header-title\">{props.title}</p>\n        </header>\n        <div className=\"card-content\">\n            <div className=\"content\">{props.desc}</div>\n        </div>\n        <footer className=\"card-footer\">\n            <Link to={props.pathGame} className=\"card-footer-item\">Play</Link>\n        </footer>\n    </div>\n}\n","import React, { useContext } from \"react\";\nimport { SocketContext } from \"../context/SocketProvider\";\nimport { useInput } from \"../hooks\";\n\nexport const AskNickname = () => {\n  const { input: nickname, onInputChange: onNicknameChange } = useInput();\n  const { io } = useContext(SocketContext);\n\n  const sendNickname = () => {\n    io!.emit(\"Game::sendNickname\", nickname);\n  };\n\n  return (\n    <div className=\"field\">\n      <div className=\"control\">\n        <input className=\"input\" placeholder=\"Write your nickname\" onChange={onNicknameChange} value={nickname} />\n      </div>\n      <div className=\"control\">\n        <button className=\"button is-info\" onClick={sendNickname}>Send</button>\n      </div>\n    </div>\n  );\n};\n","import { useState } from 'react';\n\nexport const useInput = (initialValue: string = '') => {\n    const [input, setInput] = useState<string>(initialValue);\n\n    const onInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setInput(event.target.value);\n    };\n\n    return {\n        input,\n        setInput,\n        onInputChange\n    }\n}\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Message } from \"../models/Message\";\nimport { SocketContext } from \"../context/SocketProvider\";\nimport { WaitingGame } from \"../components\";\nimport { useMessage } from \"../hooks\";\n\nexport const MagicNumber = () => {\n  const [isGameStarted, setGameStarted] = useState(false);\n\n  const [playerNumber, setPlayerNumber] = useState('');\n  const { message, setSuccessMsg, setErrorMsg } = useMessage();\n  const [isGameEnd, setGameEnd] = useState<boolean>(false);\n  const { io, player } = useContext(SocketContext);\n\n  useEffect(() => {\n    io!.on(\"magicnumber::gameStart\", () => {\n      console.log(\"game started\");\n      setGameStarted(true);\n    });\n\n    io!.emit('Game::join', 'magicnumber')\n\n    io!.on(\"magicnumber::winPoint\", () => {\n      setSuccessMsg('You win a point !');\n      setPlayerNumber('');\n    });\n    io!.on(\"magicnumber::losePoint\", (payload: any) => {\n      setErrorMsg(`You lose this round :/ ${payload.playerName} win a point.`);\n      setPlayerNumber('');\n    });\n    io!.on(\"magicnumber::gameEnd\", (status: any) => {\n      if (status === 'win') {\n        setSuccessMsg('You win !');\n      } else {\n        setErrorMsg('You lose !');\n      }\n      setPlayerNumber('');\n      setGameEnd(true);\n    });\n    io!.on(\"magicnumber::gameForceEnd\", () => {\n      setErrorMsg('Game stopped ! Due to player disconnection');\n      setPlayerNumber('');\n      setGameEnd(true);\n    });\n  }, [])\n\n  useEffect(() => {\n    io!.once(\"magicnumber::numberIsLess\", () => {\n      setErrorMsg(`Number is less than ${playerNumber}!`);\n    });\n    io!.once(\"magicnumber::numberIsMore\", () => {\n      setErrorMsg(`Number is more than ${playerNumber}!`);\n    });\n  }, [playerNumber])\n\n  const handleNumber = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setPlayerNumber(event.target.value);\n  };\n\n  const sendNumber = () => {\n    console.log(playerNumber);\n\n    if (!playerNumber) return;\n\n    io!.emit(\"magicnumber::tryNumber\", {\n      id: player!.id,\n      number: parseInt(playerNumber)\n    });\n  };\n\n  const displayMessage = (message?: Message) => {\n    if (!message) return <></>\n    return <div className={`notification is-${message.isSuccess ? 'success' : 'danger'}`}>\n      {message.msg}\n    </div>\n  }\n\n  if (!isGameStarted) {\n    return <WaitingGame />\n  }\n\n  return (\n    <div className=\"box\">\n      {displayMessage(message)}\n      {!isGameEnd && (\n        <div className=\"field\">\n          <div className=\"control\">\n            <input className=\"input\" placeholder=\"Guess the number (from 0 to 1337)\" onChange={handleNumber} value={`${playerNumber}`} />\n          </div>\n          <div className=\"control\">\n            <button className=\"button is-info\" onClick={sendNumber}>\n              Send\n        </button>\n          </div>\n        </div>\n      )}\n      <h5>You have {player?.points} points</h5>\n      {isGameEnd && <Link to='/games'>Back to games</Link>}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { Message } from '../models/Message';\n\nexport const useMessage = () => {\n    const [message, setMessage] = useState<Message>();\n\n    const setSuccessMsg = (msg: string) => {\n        setMessage({ msg, isSuccess: true });\n    }\n    const setErrorMsg = (msg: string) => {\n        setMessage({ msg, isSuccess: false });\n    }\n\n    return {\n        message,\n        setSuccessMsg,\n        setErrorMsg\n    };\n}\n","import React from 'react';\nimport { GameCard } from '../components';\n\nexport const Home = () => (\n    <div className=\"columns\">\n        <div className=\"column\">\n            <GameCard\n                title='MagicNumber'\n                desc='You have to find the random MagicNumber generated, by trying some numbers.'\n                pathGame='/magicnumber'\n            />\n        </div>\n        <div className=\"column\">\n            <GameCard\n                title='MagicNumber'\n                desc='You have to find the random MagicNumber generated, by trying some numbers.'\n                pathGame='/magicnumber'\n            />\n        </div>\n        <div className=\"column\">\n            <GameCard\n                title='MagicNumber'\n                desc='You have to find the random MagicNumber generated, by trying some numbers.'\n                pathGame='/magicnumber'\n            />\n        </div>\n    </div>\n);\n","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport socketIO from 'socket.io-client';\nimport { SocketContext } from \"./context/SocketProvider\";\nimport { MagicNumber, Home } from \"./pages\";\nimport { Player } from \"./models/Player\";\nimport { AskNickname } from \"./components\";\n\nconst io = socketIO(\"https://crosspwagame.herokuapp.com/\")\n\nexport const App = () => {\n  const [player, setPlayer] = useState<Player>();\n\n  useEffect(() => {\n    io.on('Game::playerInfo', (player: any) => {\n      console.log(\"On playerInfo\", player);\n\n      updatePlayer(player)\n    });\n  }, []);\n\n  const updatePlayer = (player?: Player) => {\n    setPlayer(player);\n  }\n\n  return (\n    <Router basename='/CrossPWAGame'>\n      <SocketContext.Provider value={{ io, player, updatePlayer }}>\n        <section className=\"hero is-fullheight is-light\">\n          <div className=\"hero-head\">\n            <div className=\"container\">\n              <div className=\"tabs is-centered\">\n                <ul>\n                  <li>\n                    <Link to='/'>PWA Games</Link>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"hero-body\">\n            <div className=\"container\">\n              <header className=\"bd-index-header\">\n                {!player ? (\n                  <AskNickname />\n                ) : (\n                    <Switch>\n                      <Route exact path=\"/\">\n                        <Home />\n                      </Route>\n                      <Route path=\"/magicnumber\">\n                        <MagicNumber />\n                      </Route>\n                    </Switch>\n                  )}\n              </header>\n            </div>\n          </div>\n\n          <div className=\"hero-foot\">\n            <div className=\"container\">\n              <div className=\"tabs is-centered\">\n                <ul>\n                  <li>Let's Rock!</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </section>\n      </SocketContext.Provider >\n    </Router >\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}